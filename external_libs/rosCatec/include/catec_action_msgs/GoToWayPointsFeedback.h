/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_actions_msgs/msg/GoToWayPointsFeedback.msg */
#ifndef CATEC_ACTIONS_MSGS_MESSAGE_GOTOWAYPOINTSFEEDBACK_H
#define CATEC_ACTIONS_MSGS_MESSAGE_GOTOWAYPOINTSFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/WayPointWithCruiseStamped.h"

namespace catec_actions_msgs
{
template <class ContainerAllocator>
struct GoToWayPointsFeedback_ {
  typedef GoToWayPointsFeedback_<ContainerAllocator> Type;

  GoToWayPointsFeedback_()
  : distance_to_goal(0.0)
  , distance_to_next_waypoint(0.0)
  , way_point()
  {
  }

  GoToWayPointsFeedback_(const ContainerAllocator& _alloc)
  : distance_to_goal(0.0)
  , distance_to_next_waypoint(0.0)
  , way_point(_alloc)
  {
  }

  typedef float _distance_to_goal_type;
  float distance_to_goal;

  typedef float _distance_to_next_waypoint_type;
  float distance_to_next_waypoint;

  typedef  ::catec_msgs::WayPointWithCruiseStamped_<ContainerAllocator>  _way_point_type;
   ::catec_msgs::WayPointWithCruiseStamped_<ContainerAllocator>  way_point;


  typedef boost::shared_ptr< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator>  const> ConstPtr;
}; // struct GoToWayPointsFeedback
typedef  ::catec_actions_msgs::GoToWayPointsFeedback_<std::allocator<void> > GoToWayPointsFeedback;

typedef boost::shared_ptr< ::catec_actions_msgs::GoToWayPointsFeedback> GoToWayPointsFeedbackPtr;
typedef boost::shared_ptr< ::catec_actions_msgs::GoToWayPointsFeedback const> GoToWayPointsFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_actions_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bd9d30f28c623f1ae9bd5ea4e3b44bdc";
  }

  static const char* value(const  ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbd9d30f28c623f1aULL;
  static const uint64_t static_value2 = 0xe9bd5ea4e3b44bdcULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_actions_msgs/GoToWayPointsFeedback";
  }

  static const char* value(const  ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback definition\n\
float32 distance_to_goal\n\
float32 distance_to_next_waypoint\n\
catec_msgs/WayPointWithCruiseStamped way_point\n\
\n\
================================================================================\n\
MSG: catec_msgs/WayPointWithCruiseStamped\n\
Header header\n\
WayPointWithCruise way_point\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: catec_msgs/WayPointWithCruise\n\
float64 x\n\
float64 y\n\
float64 z\n\
float32 cruise\n\
float64 heading\n\
";
  }

  static const char* value(const  ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.distance_to_goal);
    stream.next(m.distance_to_next_waypoint);
    stream.next(m.way_point);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GoToWayPointsFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_actions_msgs::GoToWayPointsFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "distance_to_goal: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_goal);
    s << indent << "distance_to_next_waypoint: ";
    Printer<float>::stream(s, indent + "  ", v.distance_to_next_waypoint);
    s << indent << "way_point: ";
s << std::endl;
    Printer< ::catec_msgs::WayPointWithCruiseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.way_point);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_ACTIONS_MSGS_MESSAGE_GOTOWAYPOINTSFEEDBACK_H

