/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/TargetsDetected.msg */
#ifndef CATEC_MSGS_MESSAGE_TARGETSDETECTED_H
#define CATEC_MSGS_MESSAGE_TARGETSDETECTED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/Target.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct TargetsDetected_ {
  typedef TargetsDetected_<ContainerAllocator> Type;

  TargetsDetected_()
  : targets()
  , size(0)
  {
  }

  TargetsDetected_(const ContainerAllocator& _alloc)
  : targets(_alloc)
  , size(0)
  {
  }

  typedef std::vector< ::catec_msgs::Target_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::catec_msgs::Target_<ContainerAllocator> >::other >  _targets_type;
  std::vector< ::catec_msgs::Target_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::catec_msgs::Target_<ContainerAllocator> >::other >  targets;

  typedef uint32_t _size_type;
  uint32_t size;


  typedef boost::shared_ptr< ::catec_msgs::TargetsDetected_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::TargetsDetected_<ContainerAllocator>  const> ConstPtr;
}; // struct TargetsDetected
typedef  ::catec_msgs::TargetsDetected_<std::allocator<void> > TargetsDetected;

typedef boost::shared_ptr< ::catec_msgs::TargetsDetected> TargetsDetectedPtr;
typedef boost::shared_ptr< ::catec_msgs::TargetsDetected const> TargetsDetectedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::TargetsDetected_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::TargetsDetected_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::TargetsDetected_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::TargetsDetected_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::TargetsDetected_<ContainerAllocator> > {
  static const char* value() 
  {
    return "85cdfc6fa09a5594f19d51c8ce45b0ea";
  }

  static const char* value(const  ::catec_msgs::TargetsDetected_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x85cdfc6fa09a5594ULL;
  static const uint64_t static_value2 = 0xf19d51c8ce45b0eaULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::TargetsDetected_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/TargetsDetected";
  }

  static const char* value(const  ::catec_msgs::TargetsDetected_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::TargetsDetected_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Target[] targets\n\
uint32 size\n\
================================================================================\n\
MSG: catec_msgs/Target\n\
#BOTH = First and second\n\
uint8 BOTH=0\n\
uint8 FIRST=1\n\
uint8 SECOND=2\n\
uint8 THIRD=3\n\
uint8 FIRST_THIRD=4\n\
uint8 SECOND_THIRD=5\n\
uint8 ALL=6\n\
uint8 target\n\
Position position\n\
\n\
================================================================================\n\
MSG: catec_msgs/Position\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::catec_msgs::TargetsDetected_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::TargetsDetected_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.targets);
    stream.next(m.size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TargetsDetected_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::TargetsDetected_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::TargetsDetected_<ContainerAllocator> & v) 
  {
    s << indent << "targets[]" << std::endl;
    for (size_t i = 0; i < v.targets.size(); ++i)
    {
      s << indent << "  targets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::catec_msgs::Target_<ContainerAllocator> >::stream(s, indent + "    ", v.targets[i]);
    }
    s << indent << "size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_TARGETSDETECTED_H

