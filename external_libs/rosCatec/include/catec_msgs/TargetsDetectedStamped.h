/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/TargetsDetectedStamped.msg */
#ifndef CATEC_MSGS_MESSAGE_TARGETSDETECTEDSTAMPED_H
#define CATEC_MSGS_MESSAGE_TARGETSDETECTEDSTAMPED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "catec_msgs/TargetsDetected.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct TargetsDetectedStamped_ {
  typedef TargetsDetectedStamped_<ContainerAllocator> Type;

  TargetsDetectedStamped_()
  : header()
  , targets()
  {
  }

  TargetsDetectedStamped_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , targets(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::catec_msgs::TargetsDetected_<ContainerAllocator>  _targets_type;
   ::catec_msgs::TargetsDetected_<ContainerAllocator>  targets;


  typedef boost::shared_ptr< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator>  const> ConstPtr;
}; // struct TargetsDetectedStamped
typedef  ::catec_msgs::TargetsDetectedStamped_<std::allocator<void> > TargetsDetectedStamped;

typedef boost::shared_ptr< ::catec_msgs::TargetsDetectedStamped> TargetsDetectedStampedPtr;
typedef boost::shared_ptr< ::catec_msgs::TargetsDetectedStamped const> TargetsDetectedStampedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4f9b488f1e1ebb563d445b9fbc7c35fa";
  }

  static const char* value(const  ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4f9b488f1e1ebb56ULL;
  static const uint64_t static_value2 = 0x3d445b9fbc7c35faULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/TargetsDetectedStamped";
  }

  static const char* value(const  ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
TargetsDetected targets\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: catec_msgs/TargetsDetected\n\
Target[] targets\n\
uint32 size\n\
================================================================================\n\
MSG: catec_msgs/Target\n\
#BOTH = First and second\n\
uint8 BOTH=0\n\
uint8 FIRST=1\n\
uint8 SECOND=2\n\
uint8 THIRD=3\n\
uint8 FIRST_THIRD=4\n\
uint8 SECOND_THIRD=5\n\
uint8 ALL=6\n\
uint8 target\n\
Position position\n\
\n\
================================================================================\n\
MSG: catec_msgs/Position\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.targets);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TargetsDetectedStamped_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::TargetsDetectedStamped_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "targets: ";
s << std::endl;
    Printer< ::catec_msgs::TargetsDetected_<ContainerAllocator> >::stream(s, indent + "  ", v.targets);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_TARGETSDETECTEDSTAMPED_H

