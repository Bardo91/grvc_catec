/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/ControlReferenceRw.msg */
#ifndef CATEC_MSGS_MESSAGE_CONTROLREFERENCERW_H
#define CATEC_MSGS_MESSAGE_CONTROLREFERENCERW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/Position.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct ControlReferenceRw_ {
  typedef ControlReferenceRw_<ContainerAllocator> Type;

  ControlReferenceRw_()
  : position()
  , cruise(0.0)
  , heading(0.0)
  {
  }

  ControlReferenceRw_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , cruise(0.0)
  , heading(0.0)
  {
  }

  typedef  ::catec_msgs::Position_<ContainerAllocator>  _position_type;
   ::catec_msgs::Position_<ContainerAllocator>  position;

  typedef double _cruise_type;
  double cruise;

  typedef double _heading_type;
  double heading;


  typedef boost::shared_ptr< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::ControlReferenceRw_<ContainerAllocator>  const> ConstPtr;
}; // struct ControlReferenceRw
typedef  ::catec_msgs::ControlReferenceRw_<std::allocator<void> > ControlReferenceRw;

typedef boost::shared_ptr< ::catec_msgs::ControlReferenceRw> ControlReferenceRwPtr;
typedef boost::shared_ptr< ::catec_msgs::ControlReferenceRw const> ControlReferenceRwConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::ControlReferenceRw_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::ControlReferenceRw_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f267b6031d79c335f613d206674bda79";
  }

  static const char* value(const  ::catec_msgs::ControlReferenceRw_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf267b6031d79c335ULL;
  static const uint64_t static_value2 = 0xf613d206674bda79ULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/ControlReferenceRw";
  }

  static const char* value(const  ::catec_msgs::ControlReferenceRw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Position position\n\
float64 cruise\n\
float64 heading\n\
================================================================================\n\
MSG: catec_msgs/Position\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::catec_msgs::ControlReferenceRw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.cruise);
    stream.next(m.heading);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlReferenceRw_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::ControlReferenceRw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::ControlReferenceRw_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::catec_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "cruise: ";
    Printer<double>::stream(s, indent + "  ", v.cruise);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_CONTROLREFERENCERW_H

