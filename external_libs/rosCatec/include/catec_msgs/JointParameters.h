/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/JointParameters.msg */
#ifndef CATEC_MSGS_MESSAGE_JOINTPARAMETERS_H
#define CATEC_MSGS_MESSAGE_JOINTPARAMETERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace catec_msgs
{
template <class ContainerAllocator>
struct JointParameters_ {
  typedef JointParameters_<ContainerAllocator> Type;

  JointParameters_()
  : joint_name()
  , Kp(0.0)
  , Ki(0.0)
  , Kd(0.0)
  , i_min(0.0)
  , i_max(0.0)
  , effort(0.0)
  , velocity(0.0)
  {
  }

  JointParameters_(const ContainerAllocator& _alloc)
  : joint_name(_alloc)
  , Kp(0.0)
  , Ki(0.0)
  , Kd(0.0)
  , i_min(0.0)
  , i_max(0.0)
  , effort(0.0)
  , velocity(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joint_name;

  typedef double _Kp_type;
  double Kp;

  typedef double _Ki_type;
  double Ki;

  typedef double _Kd_type;
  double Kd;

  typedef double _i_min_type;
  double i_min;

  typedef double _i_max_type;
  double i_max;

  typedef double _effort_type;
  double effort;

  typedef double _velocity_type;
  double velocity;


  typedef boost::shared_ptr< ::catec_msgs::JointParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::JointParameters_<ContainerAllocator>  const> ConstPtr;
}; // struct JointParameters
typedef  ::catec_msgs::JointParameters_<std::allocator<void> > JointParameters;

typedef boost::shared_ptr< ::catec_msgs::JointParameters> JointParametersPtr;
typedef boost::shared_ptr< ::catec_msgs::JointParameters const> JointParametersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::JointParameters_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::JointParameters_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::JointParameters_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::JointParameters_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::JointParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1efe63c9fcc48142ffc05c11f95d0b6a";
  }

  static const char* value(const  ::catec_msgs::JointParameters_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1efe63c9fcc48142ULL;
  static const uint64_t static_value2 = 0xffc05c11f95d0b6aULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::JointParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/JointParameters";
  }

  static const char* value(const  ::catec_msgs::JointParameters_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::JointParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string joint_name\n\
float64 Kp\n\
float64 Ki\n\
float64 Kd\n\
float64 i_min\n\
float64 i_max\n\
float64 effort\n\
float64 velocity\n\
\n\
\n\
";
  }

  static const char* value(const  ::catec_msgs::JointParameters_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::JointParameters_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_name);
    stream.next(m.Kp);
    stream.next(m.Ki);
    stream.next(m.Kd);
    stream.next(m.i_min);
    stream.next(m.i_max);
    stream.next(m.effort);
    stream.next(m.velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointParameters_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::JointParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::JointParameters_<ContainerAllocator> & v) 
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "Kp: ";
    Printer<double>::stream(s, indent + "  ", v.Kp);
    s << indent << "Ki: ";
    Printer<double>::stream(s, indent + "  ", v.Ki);
    s << indent << "Kd: ";
    Printer<double>::stream(s, indent + "  ", v.Kd);
    s << indent << "i_min: ";
    Printer<double>::stream(s, indent + "  ", v.i_min);
    s << indent << "i_max: ";
    Printer<double>::stream(s, indent + "  ", v.i_max);
    s << indent << "effort: ";
    Printer<double>::stream(s, indent + "  ", v.effort);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_JOINTPARAMETERS_H

