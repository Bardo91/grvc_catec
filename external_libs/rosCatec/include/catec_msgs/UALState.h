/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/UALState.msg */
#ifndef CATEC_MSGS_MESSAGE_UALSTATE_H
#define CATEC_MSGS_MESSAGE_UALSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/DynamicState.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct UALState_ {
  typedef UALState_<ContainerAllocator> Type;

  UALState_()
  : dynamic_state()
  , flying_state(0)
  , remaining_battery(0)
  , memory_usage(0)
  , cpu_usage(0)
  {
  }

  UALState_(const ContainerAllocator& _alloc)
  : dynamic_state(_alloc)
  , flying_state(0)
  , remaining_battery(0)
  , memory_usage(0)
  , cpu_usage(0)
  {
  }

  typedef  ::catec_msgs::DynamicState_<ContainerAllocator>  _dynamic_state_type;
   ::catec_msgs::DynamicState_<ContainerAllocator>  dynamic_state;

  typedef uint8_t _flying_state_type;
  uint8_t flying_state;

  typedef uint8_t _remaining_battery_type;
  uint8_t remaining_battery;

  typedef uint8_t _memory_usage_type;
  uint8_t memory_usage;

  typedef uint8_t _cpu_usage_type;
  uint8_t cpu_usage;


  typedef boost::shared_ptr< ::catec_msgs::UALState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::UALState_<ContainerAllocator>  const> ConstPtr;
}; // struct UALState
typedef  ::catec_msgs::UALState_<std::allocator<void> > UALState;

typedef boost::shared_ptr< ::catec_msgs::UALState> UALStatePtr;
typedef boost::shared_ptr< ::catec_msgs::UALState const> UALStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::UALState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::UALState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::UALState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::UALState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::UALState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c9002b774c1fe0eae88ac07be40ee78b";
  }

  static const char* value(const  ::catec_msgs::UALState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc9002b774c1fe0eaULL;
  static const uint64_t static_value2 = 0xe88ac07be40ee78bULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::UALState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/UALState";
  }

  static const char* value(const  ::catec_msgs::UALState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::UALState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "DynamicState dynamic_state\n\
uint8 flying_state\n\
uint8 remaining_battery\n\
uint8 memory_usage\n\
uint8 cpu_usage\n\
================================================================================\n\
MSG: catec_msgs/DynamicState\n\
PositionWithCheck position\n\
OrientationWithCheck orientation\n\
VelocityWithCheck velocity\n\
================================================================================\n\
MSG: catec_msgs/PositionWithCheck\n\
float64 x\n\
float64 y\n\
float64 z\n\
uint8 valid\n\
================================================================================\n\
MSG: catec_msgs/OrientationWithCheck\n\
float64 x\n\
float64 y\n\
float64 z\n\
uint8 valid\n\
================================================================================\n\
MSG: catec_msgs/VelocityWithCheck\n\
float64 x\n\
float64 y\n\
float64 z\n\
uint8 valid\n\
";
  }

  static const char* value(const  ::catec_msgs::UALState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::catec_msgs::UALState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::UALState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dynamic_state);
    stream.next(m.flying_state);
    stream.next(m.remaining_battery);
    stream.next(m.memory_usage);
    stream.next(m.cpu_usage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UALState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::UALState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::UALState_<ContainerAllocator> & v) 
  {
    s << indent << "dynamic_state: ";
s << std::endl;
    Printer< ::catec_msgs::DynamicState_<ContainerAllocator> >::stream(s, indent + "  ", v.dynamic_state);
    s << indent << "flying_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flying_state);
    s << indent << "remaining_battery: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remaining_battery);
    s << indent << "memory_usage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.memory_usage);
    s << indent << "cpu_usage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cpu_usage);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_UALSTATE_H

