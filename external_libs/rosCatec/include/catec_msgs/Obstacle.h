/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/Obstacle.msg */
#ifndef CATEC_MSGS_MESSAGE_OBSTACLE_H
#define CATEC_MSGS_MESSAGE_OBSTACLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/Position.h"
#include "catec_msgs/Vector3.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct Obstacle_ {
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
  : pos()
  , size()
  {
  }

  Obstacle_(const ContainerAllocator& _alloc)
  : pos(_alloc)
  , size(_alloc)
  {
  }

  typedef  ::catec_msgs::Position_<ContainerAllocator>  _pos_type;
   ::catec_msgs::Position_<ContainerAllocator>  pos;

  typedef  ::catec_msgs::Vector3_<ContainerAllocator>  _size_type;
   ::catec_msgs::Vector3_<ContainerAllocator>  size;


  typedef boost::shared_ptr< ::catec_msgs::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::Obstacle_<ContainerAllocator>  const> ConstPtr;
}; // struct Obstacle
typedef  ::catec_msgs::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::catec_msgs::Obstacle> ObstaclePtr;
typedef boost::shared_ptr< ::catec_msgs::Obstacle const> ObstacleConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::Obstacle_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::Obstacle_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::Obstacle_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::Obstacle_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::Obstacle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "65b2eb41fd50368a9d7df323563b68e1";
  }

  static const char* value(const  ::catec_msgs::Obstacle_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x65b2eb41fd50368aULL;
  static const uint64_t static_value2 = 0x9d7df323563b68e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::Obstacle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/Obstacle";
  }

  static const char* value(const  ::catec_msgs::Obstacle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::Obstacle_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Position pos\n\
Vector3  size\n\
\n\
\n\
\n\
================================================================================\n\
MSG: catec_msgs/Position\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: catec_msgs/Vector3\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::catec_msgs::Obstacle_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::catec_msgs::Obstacle_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pos);
    stream.next(m.size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Obstacle_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::Obstacle_<ContainerAllocator> & v) 
  {
    s << indent << "pos: ";
s << std::endl;
    Printer< ::catec_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "size: ";
s << std::endl;
    Printer< ::catec_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_OBSTACLE_H

