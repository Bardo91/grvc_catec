/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/MultiUAVCollision.msg */
#ifndef CATEC_MSGS_MESSAGE_MULTIUAVCOLLISION_H
#define CATEC_MSGS_MESSAGE_MULTIUAVCOLLISION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/TimePriorityCollisionPoint.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct MultiUAVCollision_ {
  typedef MultiUAVCollision_<ContainerAllocator> Type;

  MultiUAVCollision_()
  : trayectories()
  {
  }

  MultiUAVCollision_(const ContainerAllocator& _alloc)
  : trayectories(_alloc)
  {
  }

  typedef std::vector< ::catec_msgs::TimePriorityCollisionPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::catec_msgs::TimePriorityCollisionPoint_<ContainerAllocator> >::other >  _trayectories_type;
  std::vector< ::catec_msgs::TimePriorityCollisionPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::catec_msgs::TimePriorityCollisionPoint_<ContainerAllocator> >::other >  trayectories;


  typedef boost::shared_ptr< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::MultiUAVCollision_<ContainerAllocator>  const> ConstPtr;
}; // struct MultiUAVCollision
typedef  ::catec_msgs::MultiUAVCollision_<std::allocator<void> > MultiUAVCollision;

typedef boost::shared_ptr< ::catec_msgs::MultiUAVCollision> MultiUAVCollisionPtr;
typedef boost::shared_ptr< ::catec_msgs::MultiUAVCollision const> MultiUAVCollisionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::MultiUAVCollision_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::MultiUAVCollision_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e6f7055780e71a0b00d2554a57762e09";
  }

  static const char* value(const  ::catec_msgs::MultiUAVCollision_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe6f7055780e71a0bULL;
  static const uint64_t static_value2 = 0x00d2554a57762e09ULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/MultiUAVCollision";
  }

  static const char* value(const  ::catec_msgs::MultiUAVCollision_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TimePriorityCollisionPoint[] trayectories\n\
\n\
================================================================================\n\
MSG: catec_msgs/TimePriorityCollisionPoint\n\
float64 x\n\
float64 y\n\
float64 z\n\
uint8 priority\n\
uint32 time\n\
\n\
";
  }

  static const char* value(const  ::catec_msgs::MultiUAVCollision_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trayectories);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MultiUAVCollision_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::MultiUAVCollision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::MultiUAVCollision_<ContainerAllocator> & v) 
  {
    s << indent << "trayectories[]" << std::endl;
    for (size_t i = 0; i < v.trayectories.size(); ++i)
    {
      s << indent << "  trayectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::catec_msgs::TimePriorityCollisionPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trayectories[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_MULTIUAVCOLLISION_H

