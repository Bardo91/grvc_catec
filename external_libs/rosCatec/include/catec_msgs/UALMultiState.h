/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/UALMultiState.msg */
#ifndef CATEC_MSGS_MESSAGE_UALMULTISTATE_H
#define CATEC_MSGS_MESSAGE_UALMULTISTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/Position.h"
#include "catec_msgs/Position.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct UALMultiState_ {
  typedef UALMultiState_<ContainerAllocator> Type;

  UALMultiState_()
  : uav_id(0)
  , actual_position()
  , next_position()
  , blocked(0)
  {
  }

  UALMultiState_(const ContainerAllocator& _alloc)
  : uav_id(0)
  , actual_position(_alloc)
  , next_position(_alloc)
  , blocked(0)
  {
  }

  typedef uint8_t _uav_id_type;
  uint8_t uav_id;

  typedef  ::catec_msgs::Position_<ContainerAllocator>  _actual_position_type;
   ::catec_msgs::Position_<ContainerAllocator>  actual_position;

  typedef  ::catec_msgs::Position_<ContainerAllocator>  _next_position_type;
   ::catec_msgs::Position_<ContainerAllocator>  next_position;

  typedef uint8_t _blocked_type;
  uint8_t blocked;


  typedef boost::shared_ptr< ::catec_msgs::UALMultiState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::UALMultiState_<ContainerAllocator>  const> ConstPtr;
}; // struct UALMultiState
typedef  ::catec_msgs::UALMultiState_<std::allocator<void> > UALMultiState;

typedef boost::shared_ptr< ::catec_msgs::UALMultiState> UALMultiStatePtr;
typedef boost::shared_ptr< ::catec_msgs::UALMultiState const> UALMultiStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::UALMultiState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::UALMultiState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::UALMultiState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::UALMultiState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::UALMultiState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c0ecfb59d571c1661041526978cfb99";
  }

  static const char* value(const  ::catec_msgs::UALMultiState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8c0ecfb59d571c16ULL;
  static const uint64_t static_value2 = 0x61041526978cfb99ULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::UALMultiState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/UALMultiState";
  }

  static const char* value(const  ::catec_msgs::UALMultiState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::UALMultiState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 uav_id\n\
Position actual_position\n\
Position next_position\n\
uint8 blocked\n\
================================================================================\n\
MSG: catec_msgs/Position\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::catec_msgs::UALMultiState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::catec_msgs::UALMultiState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::UALMultiState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.uav_id);
    stream.next(m.actual_position);
    stream.next(m.next_position);
    stream.next(m.blocked);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct UALMultiState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::UALMultiState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::UALMultiState_<ContainerAllocator> & v) 
  {
    s << indent << "uav_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uav_id);
    s << indent << "actual_position: ";
s << std::endl;
    Printer< ::catec_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.actual_position);
    s << indent << "next_position: ";
s << std::endl;
    Printer< ::catec_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.next_position);
    s << indent << "blocked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.blocked);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_UALMULTISTATE_H

