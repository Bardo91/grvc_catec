/* Auto-generated by genmsg_cpp for file /home/bardo91/programing/ROS-CATEC/CATEC_dataTypes/catec_msgs/msg/Target.msg */
#ifndef CATEC_MSGS_MESSAGE_TARGET_H
#define CATEC_MSGS_MESSAGE_TARGET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "catec_msgs/Position.h"

namespace catec_msgs
{
template <class ContainerAllocator>
struct Target_ {
  typedef Target_<ContainerAllocator> Type;

  Target_()
  : target(0)
  , position()
  {
  }

  Target_(const ContainerAllocator& _alloc)
  : target(0)
  , position(_alloc)
  {
  }

  typedef uint8_t _target_type;
  uint8_t target;

  typedef  ::catec_msgs::Position_<ContainerAllocator>  _position_type;
   ::catec_msgs::Position_<ContainerAllocator>  position;

  enum { BOTH = 0 };
  enum { FIRST = 1 };
  enum { SECOND = 2 };
  enum { THIRD = 3 };
  enum { FIRST_THIRD = 4 };
  enum { SECOND_THIRD = 5 };
  enum { ALL = 6 };

  typedef boost::shared_ptr< ::catec_msgs::Target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::catec_msgs::Target_<ContainerAllocator>  const> ConstPtr;
}; // struct Target
typedef  ::catec_msgs::Target_<std::allocator<void> > Target;

typedef boost::shared_ptr< ::catec_msgs::Target> TargetPtr;
typedef boost::shared_ptr< ::catec_msgs::Target const> TargetConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::catec_msgs::Target_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::catec_msgs::Target_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace catec_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::Target_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::catec_msgs::Target_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::catec_msgs::Target_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f2a926a763c54809004db9c84a7d0df8";
  }

  static const char* value(const  ::catec_msgs::Target_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf2a926a763c54809ULL;
  static const uint64_t static_value2 = 0x004db9c84a7d0df8ULL;
};

template<class ContainerAllocator>
struct DataType< ::catec_msgs::Target_<ContainerAllocator> > {
  static const char* value() 
  {
    return "catec_msgs/Target";
  }

  static const char* value(const  ::catec_msgs::Target_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::catec_msgs::Target_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#BOTH = First and second\n\
uint8 BOTH=0\n\
uint8 FIRST=1\n\
uint8 SECOND=2\n\
uint8 THIRD=3\n\
uint8 FIRST_THIRD=4\n\
uint8 SECOND_THIRD=5\n\
uint8 ALL=6\n\
uint8 target\n\
Position position\n\
\n\
================================================================================\n\
MSG: catec_msgs/Position\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::catec_msgs::Target_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::catec_msgs::Target_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::catec_msgs::Target_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.target);
    stream.next(m.position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Target_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::catec_msgs::Target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::catec_msgs::Target_<ContainerAllocator> & v) 
  {
    s << indent << "target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target);
    s << indent << "position: ";
s << std::endl;
    Printer< ::catec_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CATEC_MSGS_MESSAGE_TARGET_H

